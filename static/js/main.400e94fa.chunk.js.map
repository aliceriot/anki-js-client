{"version":3,"sources":["DialogField.js","Dialog.js","color.js","Kanji.js","Vocab.js","db.js","Level.js","queries.js","HomePage.js","App.js","serviceWorker.js","index.js"],"names":["DialogField","props","item","label","fieldName","html","className","dangerouslySetInnerHTML","__html","fields","value","Dialog","handleClickOutside","evt","hide","children","this","open","Component","onClickOutside","intervalToColor","interval","r","g","percentage","Math","round","b","toString","slice","Kanji","kanji","useState","showDialog","setShowDialog","Fragment","onClick","style","backgroundColor","interval_avg","Characters","Vocab","vocab","db","Dexie","version","stores","window","learned","toLearn","floor","Level","level","expanded","setExpanded","setKanji","setVocab","kanjiLearned","setKanjiLearned","vocabLearned","setVocabLearned","useEffect","a","where","equals","toArray","and","count","foo","class","length","width","map","ankiRequestBody","action","params","makeAnkiRequest","body","fetch","method","JSON","stringify","response","json","result","requestAnkiPermission","deckInfoRequest","deckName","query","bulkNoteInfoRequest","noteIds","notes","bulkCardInfoRequest","cardIDs","cards","buildDB","log","noteIDs","kanjiNotes","filter","note","tags","includes","vocabNotes","kanjiNotesMap","forEach","Number","find","entry","match","replace","vocabNotesMap","kanjiCardIDs","flatMap","vocabCardIDs","i","kanjiCards","card","push","mean","console","bulkPut","Object","values","vocabCards","levels","times","n","HomePage","dataFetched","setDataFetched","fetchingLog","setFetchingLog","update","cur","then","App","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.400e94fa.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function DialogField(props) {\n  const { item, label, fieldName, html } = props\n\n  return (\n    <div className=\"dialog-field\">\n      <div className=\"label\">{label}:</div>\n      <div className=\"value\">\n        {html ? (\n          <div\n            dangerouslySetInnerHTML={{ __html: item.fields[fieldName].value }}\n          />\n        ) : (\n          item.fields[fieldName].value\n        )}\n      </div>\n    </div>\n  )\n}\n","import React, { Component } from \"react\"\nimport onClickOutside from \"react-onclickoutside\"\n\nclass Dialog extends Component {\n  handleClickOutside = evt => {\n    const { hide } = this.props\n    hide()\n  }\n\n  render() {\n    const { children } = this.props\n    return (\n      <dialog open className=\"item-dialog\">\n        {children}\n      </dialog>\n    )\n  }\n}\n\nexport default onClickOutside(Dialog)\n","export const intervalToColor = interval => {\n  let r,\n    g,\n    b = 0\n\n  // arbitrarily high number\n  let percentage = interval > 500 ? 1 : interval / 500.0\n\n  percentage = percentage * 100\n\n  if (percentage < 50) {\n    r = 255\n    g = Math.round(5.1 * percentage)\n  } else {\n    g = 255\n    r = Math.round(510 - 5.1 * percentage)\n  }\n  let h = r * 0x10000 + g * 0x100 + b * 0x1\n  return \"#\" + (\"000000\" + h.toString(16)).slice(-6)\n}\n","import React, { useState } from \"react\"\n\nimport DialogField from \"./DialogField\"\nimport Dialog from \"./Dialog\"\n\nimport { intervalToColor } from \"./color\"\n\nexport default function Kanji(props) {\n  const { kanji } = props\n\n  const [showDialog, setShowDialog] = useState(false)\n\n  return kanji ? (\n    <React.Fragment>\n      <div\n        className=\"kanji\"\n        onClick={() => setShowDialog(true)}\n        style={{\n          backgroundColor: kanji.interval_avg\n            ? intervalToColor(kanji.interval_avg)\n            : \"white\"\n        }}\n      >\n        {kanji.fields.Characters.value}\n      </div>\n      {showDialog ? (\n        <Dialog hide={() => setShowDialog(false)}>\n          <h2 className=\"dialog-title\">{kanji.fields.Characters.value}</h2>\n          <DialogField item={kanji} label=\"meaning\" fieldName=\"Meaning\" />\n          <DialogField\n            item={kanji}\n            label=\"音読み\"\n            fieldName=\"Reading_Onyomi\"\n            html\n          />\n          <DialogField\n            item={kanji}\n            label=\"訓読み\"\n            fieldName=\"Reading_Kunyomi\"\n            html\n          />\n          <DialogField item={kanji} label=\"部首\" fieldName=\"Component_Names\" />\n          <DialogField\n            item={kanji}\n            label=\"meaning mnemonic\"\n            fieldName=\"Meaning_Mnemonic\"\n            html\n          />\n          <DialogField\n            item={kanji}\n            label=\"meaning info\"\n            fieldName=\"Meaning_Info\"\n            html\n          />\n          <DialogField\n            item={kanji}\n            label=\"reading mnemonic\"\n            fieldName=\"Reading_Mnemonic\"\n            html\n          />\n          <DialogField\n            item={kanji}\n            label=\"reading info\"\n            fieldName=\"Reading_Info\"\n            html\n          />\n        </Dialog>\n      ) : null}\n    </React.Fragment>\n  ) : null\n}\n","import React, { useState } from \"react\"\n\nimport DialogField from \"./DialogField\"\nimport Dialog from \"./Dialog\"\n\nimport { intervalToColor } from \"./color\"\n\nexport default function Vocab(props) {\n  const { vocab } = props\n\n  const [showDialog, setShowDialog] = useState(false)\n\n  return vocab ? (\n    <React.Fragment>\n      <div\n        className=\"vocab\"\n        onClick={() => setShowDialog(true)}\n        key={vocab}\n        style={{\n          backgroundColor: vocab.interval_avg\n            ? intervalToColor(vocab.interval_avg)\n            : \"white\"\n        }}\n      >\n        {vocab.fields.Characters.value}\n      </div>\n      {showDialog ? (\n        <Dialog hide={() => setShowDialog(false)}>\n          <h2 className=\"dialog-title\">{vocab.fields.Characters.value}</h2>\n          <DialogField item={vocab} label=\"meaning\" fieldName=\"Meaning\" />\n          <DialogField\n            item={vocab}\n            label=\"part of speech\"\n            fieldName=\"Speech_Type\"\n          />\n          <DialogField item={vocab} label=\"reading\" fieldName=\"Reading\" html />\n          <DialogField item={vocab} label=\"発音\" fieldName=\"Reading\" html />\n          <DialogField\n            item={vocab}\n            label=\"meaning mnemonic\"\n            fieldName=\"Meaning_Mnemonic\"\n            html\n          />\n          <DialogField\n            item={vocab}\n            label=\"reading mnemonic\"\n            fieldName=\"Reading_Mnemonic\"\n            html\n          />\n          <DialogField\n            item={vocab}\n            label=\"日本語\"\n            fieldName=\"Context_jp\"\n            html\n          />\n          <DialogField item={vocab} label=\"英語\" fieldName=\"Context_en\" html />\n          <DialogField\n            item={vocab}\n            label=\"日本語\"\n            fieldName=\"Context_jp_2\"\n            html\n          />\n          <DialogField\n            item={vocab}\n            label=\"英語\"\n            fieldName=\"Context_en_2\"\n            html\n          />\n          <DialogField\n            item={vocab}\n            label=\"日本語\"\n            fieldName=\"Context_jp_3\"\n            html\n          />\n          <DialogField\n            item={vocab}\n            label=\"英語\"\n            fieldName=\"Context_en_3\"\n            html\n          />\n        </Dialog>\n      ) : null}\n    </React.Fragment>\n  ) : null\n}\n","import Dexie from \"dexie\"\n\nconst db = new Dexie(\"ankidb\")\n\ndb.version(1).stores({\n  kanji: \"kanji,noteId,interval_avg,level\",\n  vocab: \"vocab,noteId,interval_avg,level\"\n})\n\nwindow.db = db\n\nexport default db\n","import React, { useState, useEffect } from \"react\"\n\nimport Kanji from \"./Kanji\"\nimport Vocab from \"./Vocab\"\n\nimport db from \"./db\"\n\nconst percentage = (learned, toLearn) => Math.floor((learned / toLearn) * 100)\n\nexport default function Level(props) {\n  const { level } = props\n\n  const [expanded, setExpanded] = useState(false)\n\n  const [kanji, setKanji] = useState(null)\n  const [vocab, setVocab] = useState(null)\n  const [kanjiLearned, setKanjiLearned] = useState(null)\n  const [vocabLearned, setVocabLearned] = useState(null)\n\n  useEffect(() => {\n    const foo = async () => {\n      if (expanded) {\n        const kanji = await db.kanji\n          .where(\"level\")\n          .equals(level)\n          .toArray()\n        setKanji(kanji)\n\n        const kanjiLearned = await db.kanji\n          .where(\"level\")\n          .equals(level)\n          .and(kanji => kanji.interval_avg !== 0)\n          .count()\n        setKanjiLearned(kanjiLearned)\n\n        const vocab = await db.vocab\n          .where(\"level\")\n          .equals(level)\n          .toArray()\n        setVocab(vocab)\n\n        const vocabLearned = await db.vocab\n          .where(\"level\")\n          .equals(level)\n          .and(vocab => vocab.interval_avg !== 0)\n          .count()\n        setVocabLearned(vocabLearned)\n      }\n    }\n    foo()\n  }, [expanded, level])\n\n  return (\n    <div className=\"level\">\n      <div className=\"level-header\">\n        <div class=\"level-name\" onClick={() => setExpanded(!expanded)}>\n          {level}\n        </div>\n        {expanded ? <div class=\"refresh\">リフレッシュ</div> : null}\n      </div>\n      {expanded ? (\n        <div className=\"level\">\n          <div className=\"sub-level-heading\">\n            <h3>漢字</h3>\n            {kanji ? (\n              <div className=\"num-learned\">\n                {kanjiLearned} / {kanji.length}\n              </div>\n            ) : null}\n          </div>\n          {kanji ? (\n            <div className=\"progress\">\n              <div className=\"progress-background\">\n                <div\n                  style={{\n                    width: `${percentage(kanjiLearned, kanji.length)}%`\n                  }}\n                  className=\"progress-indicator\"\n                />\n              </div>\n            </div>\n          ) : null}\n          {kanji ? (\n            <div className=\"kanjis\">\n              {kanji.map(kanji => (\n                <Kanji kanji={kanji} key={kanji.kanji} />\n              ))}\n            </div>\n          ) : null}\n          <div className=\"sub-level-heading\">\n            <h3>語彙</h3>\n            {vocab ? (\n              <div className=\"num-learned\">\n                {vocabLearned} / {vocab.length}\n              </div>\n            ) : null}\n          </div>\n          {vocab ? (\n            <div className=\"progress\">\n              <div className=\"progress-background\">\n                <div\n                  style={{\n                    width: `${percentage(vocabLearned, vocab.length)}%`\n                  }}\n                  className=\"progress-indicator\"\n                />\n              </div>\n            </div>\n          ) : null}\n          {vocab ? (\n            <div className=\"vocabs\">\n              {vocab.map(vocab => (\n                <Vocab vocab={vocab} key={vocab.vocab} />\n              ))}\n            </div>\n          ) : null}\n        </div>\n      ) : null}\n    </div>\n  )\n}\n","import { mean } from \"ramda\"\n\nimport db from \"./db\"\n\nconst ANKI_URL = \"http://127.0.0.1:8765\"\n\nconst ankiRequestBody = (action, params = {}) => ({\n  action,\n  params,\n  version: 6\n})\n\nconst JAPANESE_DECK_NAME = \"日本語\"\n\nconst makeAnkiRequest = async body => {\n  const response = await fetch(ANKI_URL, {\n    method: \"POST\",\n    body: JSON.stringify(body)\n  })\n  const { result } = await response.json()\n  return result\n}\n\nconst requestAnkiPermission = async () => {\n  await makeAnkiRequest(ankiRequestBody(\"requestPermission\"))\n}\n\nconst deckInfoRequest = async deckName => {\n  const json = await makeAnkiRequest(\n    ankiRequestBody(\"findNotes\", {\n      query: `deck:${deckName}`\n    })\n  )\n  return json\n}\n\nconst bulkNoteInfoRequest = async noteIds => {\n  const json = await makeAnkiRequest(\n    ankiRequestBody(\"notesInfo\", {\n      notes: noteIds\n    })\n  )\n  return json\n}\n\nconst bulkCardInfoRequest = async cardIDs => {\n  const json = await makeAnkiRequest(\n    ankiRequestBody(\"cardsInfo\", {\n      cards: cardIDs\n    })\n  )\n  return json\n}\n\nexport const buildDB = async log => {\n  await requestAnkiPermission()\n\n  const noteIDs = await deckInfoRequest(JAPANESE_DECK_NAME)\n  const notes = await bulkNoteInfoRequest(noteIDs)\n\n  // filter the notes into two arrays\n  const kanjiNotes = notes.filter(note => note.tags.includes(\"kanji\"))\n  const vocabNotes = notes.filter(note => note.tags.includes(\"Vocabulary\"))\n\n  log(`found ${kanjiNotes.length} kanji...`)\n  log(`found ${vocabNotes.length} vocab...`)\n\n  // build a map from kanji -> fields\n  const kanjiNotesMap = {}\n  kanjiNotes.forEach(note => {\n    const kanji = note.fields[\"Characters\"].value\n    kanjiNotesMap[kanji] = note\n    kanjiNotesMap[kanji].kanji = kanji\n    kanjiNotesMap[kanji].level = Number(\n      note.tags.find(entry => entry.match(\"Lesson\")).replace(\"Lesson_\", \"\")\n    )\n  })\n\n  // and another from vocab -> fields\n  const vocabNotesMap = {}\n  vocabNotes.forEach(note => {\n    const vocab = note.fields.Characters.value\n    vocabNotesMap[vocab] = note\n    vocabNotesMap[vocab].vocab = vocab\n    vocabNotesMap[vocab].level = Number(\n      note.tags.find(entry => entry.match(\"Lesson\")).replace(\"Lesson_\", \"\")\n    )\n  })\n\n  // grab card IDs\n  const kanjiCardIDs = kanjiNotes.flatMap(note => note.cards)\n  const vocabCardIDs = vocabNotes.flatMap(note => note.cards)\n\n  log(\"fetching kanji info...\")\n\n  // fetch info for kanji cards\n  for (var i = 0; i <= kanjiCardIDs.length; i += 500) {\n    const kanjiCards = await bulkCardInfoRequest(kanjiCardIDs.slice(i, i + 500))\n\n    log(`${Math.floor((i / kanjiCardIDs.length) * 100)}%`)\n\n    kanjiCards.forEach(card => {\n      const entry = kanjiNotesMap[card.fields.Characters.value]\n\n      if (entry) {\n        if (entry.interval) {\n          entry.interval.push(card.interval)\n        } else {\n          entry.interval = [card.interval]\n        }\n        entry.interval_avg = mean(entry.interval)\n      } else {\n        console.log(card)\n        console.log(\"didnt find this kanji for some reason\")\n      }\n    })\n  }\n\n  db.kanji.bulkPut(Object.values(kanjiNotesMap))\n\n  log(\"fetching vocab info...\")\n\n  // fetch info for vocab cards\n  for (var i = 0; i <= vocabCardIDs.length; i += 500) {\n    const vocabCards = await bulkCardInfoRequest(vocabCardIDs.slice(i, i + 500))\n    log(`${Math.floor((i / vocabCardIDs.length) * 100)}%`)\n\n    vocabCards.forEach(card => {\n      const entry = vocabNotesMap[card.fields.Characters.value]\n\n      if (entry) {\n        if (entry.interval) {\n          entry.interval.push(card.interval)\n        } else {\n          entry.interval = [card.interval]\n        }\n        entry.interval_avg = mean(entry.interval)\n      } else {\n        console.log(card)\n        console.log(\"didnt find this vocab for some reason\")\n      }\n    })\n  }\n\n  log(\"done!\")\n\n  db.vocab.bulkPut(Object.values(vocabNotesMap))\n}\n","import React, { useEffect, useState } from \"react\"\nimport { times } from \"ramda\"\n\nimport Level from \"./Level\"\n\nimport { buildDB } from \"./queries\"\n\nconst levels = times(n => n + 1, 60)\n\nexport default function HomePage() {\n  const [dataFetched, setDataFetched] = useState(false)\n  const [fetchingLog, setFetchingLog] = useState([\"fetching data...\"])\n\n  useEffect(() => {\n    buildDB(update => setFetchingLog(cur => [...cur, update])).then(() => {\n      setDataFetched(true)\n    })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {dataFetched ? (\n        <div className=\"item-list\">\n          {levels.map(level => (\n            <Level level={level} key={level} />\n          ))}\n        </div>\n      ) : (\n        <div className=\"data-fetch-log\">\n          {fetchingLog.map(entry => (\n            <span>\n              {entry}\n              <br />\n            </span>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n","import React from \"react\"\nimport \"./App.css\"\n\nimport HomePage from \"./HomePage\"\n\nexport default function App() {\n  return <HomePage />\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}