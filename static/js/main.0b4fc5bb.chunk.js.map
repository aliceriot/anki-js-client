{"version":3,"sources":["DialogField.js","Dialog.js","selectors.js","color.js","Kanji.js","Vocab.js","queries.js","Level.js","HomePage.js","store.js","App.js","serviceWorker.js","index.js"],"names":["DialogField","props","item","label","fieldName","html","className","dangerouslySetInnerHTML","__html","fields","value","Dialog","handleClickOutside","evt","hide","children","this","open","Component","onClickOutside","getNoteIds","createSelector","state","entities","notesInDecks","notes","kanjiNotes","kanji","vocabNotes","vocab","getKanji","allKanji","memoize","getKanjiByLevel","level","justKanji","Object","keys","filter","tags","kanjiData","map","getVocab","allVocab","getVocabByLevel","justVocab","vocabData","getKanjiCardIDs","kanjis","cardIDs","forEach","concat","cards","getVocabCardIDs","vocabs","intervalToColor","interval","r","g","percentage","Math","round","b","toString","slice","Kanji","useSelector","useState","showDialog","setShowDialog","Fragment","onClick","style","backgroundColor","interval_avg","Vocab","key","ANKI_URL","ankiRequestBody","action","params","version","notesInDeckRequestFactory","deckName","url","body","query","transform","resp","update","merge","options","method","kanjiDeckInfoRequest","vocabDeckInfoRequest","noteInfoRequestFactory","entryFieldName","noteIds","entry","kanjiInfoRequest","vocabInfoRequest","cardInfoRequest","card","push","mean","console","log","Level","expanded","setExpanded","LevelInfo","kanjiCards","vocabCards","useRequest","isFinishedKanji","isFinished","isFinishedVocab","levels","times","n","HomePage","reducer","combineReducers","entitiesReducer","queries","queriesReducer","store","createStore","compose","applyMiddleware","queryMiddleware","networkOptions","execute","cb","a","fetch","JSON","stringify","response","json","result","undefined","status","window","__REDUX_DEVTOOLS_EXTENSION__","getQueries","App","queriesSelector","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b4fc5bb.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function DialogField(props) {\n  const { item, label, fieldName, html } = props\n\n  return (\n    <div className=\"dialog-field\">\n      <div className=\"label\">{label}:</div>\n      <div className=\"value\">\n        {html ? (\n          <div\n            dangerouslySetInnerHTML={{ __html: item.fields[fieldName].value }}\n          />\n        ) : (\n          item.fields[fieldName].value\n        )}\n      </div>\n    </div>\n  )\n}\n","import React, { Component } from \"react\"\nimport onClickOutside from \"react-onclickoutside\"\n\nclass Dialog extends Component {\n  handleClickOutside = evt => {\n    const { hide } = this.props\n    hide()\n  }\n\n  render() {\n    const { children } = this.props\n    return (\n      <dialog open className=\"item-dialog\">\n        {children}\n      </dialog>\n    )\n  }\n}\n\nexport default onClickOutside(Dialog)\n","import { createSelector } from \"reselect\"\nimport memoize from \"lodash.memoize\"\n\nexport const getNoteIds = createSelector(\n  state => state.entities.notesInDecks,\n  notes => ({\n    kanjiNotes: notes ? notes.kanji : null,\n    vocabNotes: notes ? notes.vocab : null\n  })\n)\n\nexport const getKanji = createSelector(\n  state => state.entities.kanji,\n  allKanji => memoize(kanji => allKanji[kanji])\n)\n\nexport const getKanjiByLevel = createSelector(\n  state => state.entities.kanji,\n  allKanji =>\n    memoize(level => {\n      if (allKanji) {\n        const justKanji = Object.keys(allKanji).filter(\n          kanji => allKanji[kanji].tags[1] === level\n        )\n        const kanjiData = justKanji.map(kanji => allKanji[kanji])\n\n        return [justKanji, kanjiData]\n      } else {\n        return []\n      }\n    })\n)\n\nexport const getVocab = createSelector(\n  state => state.entities.vocab,\n  allVocab => memoize(vocab => allVocab[vocab])\n)\n\nexport const getVocabByLevel = createSelector(\n  state => state.entities.vocab,\n  allVocab =>\n    memoize(level => {\n      if (allVocab) {\n        const justVocab = Object.keys(allVocab).filter(\n          vocab => allVocab[vocab].tags[0] === level\n        )\n        const vocabData = justVocab.map(vocab => allVocab[vocab])\n        return [justVocab, vocabData]\n      } else {\n        return []\n      }\n    })\n)\n\nexport const getKanjiCardIDs = createSelector(\n  state => state.entities.kanji,\n  allKanji =>\n    memoize(kanjis => {\n      if (allKanji) {\n        let cardIDs = []\n        kanjis.forEach(kanji => {\n          cardIDs = cardIDs.concat(allKanji[kanji].cards)\n        })\n        return cardIDs\n      }\n      return null\n    })\n)\n\nexport const getVocabCardIDs = createSelector(\n  state => state.entities.vocab,\n  allVocab =>\n    memoize(vocabs => {\n      if (allVocab) {\n        let cardIDs = []\n        vocabs.forEach(vocab => {\n          cardIDs = cardIDs.concat(allVocab[vocab].cards)\n        })\n        return cardIDs\n      }\n      return null\n    })\n)\n","export const intervalToColor = interval => {\n  let r,\n    g,\n    b = 0\n\n  // arbitrarily high number\n  let percentage = interval > 500 ? 1 : interval / 500.0\n\n  percentage = percentage * 100\n\n  if (percentage < 50) {\n    r = 255\n    g = Math.round(5.1 * percentage)\n  } else {\n    g = 255\n    r = Math.round(510 - 5.1 * percentage)\n  }\n  let h = r * 0x10000 + g * 0x100 + b * 0x1\n  return \"#\" + (\"000000\" + h.toString(16)).slice(-6)\n}\n","import React, { useState } from \"react\"\nimport { useSelector } from \"react-redux\"\n\nimport DialogField from \"./DialogField\"\nimport Dialog from \"./Dialog\"\n\nimport { getKanji } from \"./selectors\"\nimport { intervalToColor } from \"./color\"\n\nexport default function Kanji(props) {\n  const { kanji } = props\n\n  const kanjiData = useSelector(getKanji)(kanji)\n\n  const [showDialog, setShowDialog] = useState(false)\n\n  return kanjiData ? (\n    <React.Fragment>\n      <div\n        className=\"kanji\"\n        onClick={() => setShowDialog(true)}\n        style={{\n          backgroundColor: kanjiData.interval_avg\n            ? intervalToColor(kanjiData.interval_avg)\n            : \"white\"\n        }}\n      >\n        {kanjiData.fields.Kanji.value}\n      </div>\n      {showDialog ? (\n        <Dialog hide={() => setShowDialog(false)}>\n          <h2 className=\"dialog-title\">{kanjiData.fields.Kanji.value}</h2>\n          <DialogField\n            item={kanjiData}\n            label=\"meaning\"\n            fieldName=\"Kanji_Meaning\"\n          />\n          <DialogField\n            item={kanjiData}\n            label=\"音読み\"\n            fieldName=\"Reading_On\"\n            html\n          />\n          <DialogField\n            item={kanjiData}\n            label=\"訓読み\"\n            fieldName=\"Reading_Kun\"\n            html\n          />\n          <DialogField\n            item={kanjiData}\n            label=\"radicals\"\n            fieldName=\"Radicals_Names\"\n          />\n          <DialogField\n            item={kanjiData}\n            label=\"meaning mnemonic\"\n            fieldName=\"Meaning_Mnemonic\"\n            html\n          />\n          <DialogField\n            item={kanjiData}\n            label=\"meaning info\"\n            fieldName=\"Meaning_Info\"\n            html\n          />\n          <DialogField\n            item={kanjiData}\n            label=\"reading mnemonic\"\n            fieldName=\"Reading_Mnemonic\"\n            html\n          />\n          <DialogField\n            item={kanjiData}\n            label=\"reading info\"\n            fieldName=\"Reading_Info\"\n            html\n          />\n        </Dialog>\n      ) : null}\n    </React.Fragment>\n  ) : null\n}\n","import React, { useState } from \"react\"\nimport { useSelector } from \"react-redux\"\n\nimport DialogField from \"./DialogField\"\nimport Dialog from \"./Dialog\"\n\nimport { getVocab } from \"./selectors\"\nimport { intervalToColor } from \"./color\"\n\nexport default function Vocab(props) {\n  const { vocab } = props\n\n  const vocabData = useSelector(getVocab)(vocab)\n\n  const [showDialog, setShowDialog] = useState(false)\n\n  return vocabData ? (\n    <React.Fragment>\n      <div\n        className=\"vocab\"\n        onClick={() => setShowDialog(true)}\n        key={vocab}\n        style={{\n          backgroundColor: vocabData.interval_avg\n            ? intervalToColor(vocabData.interval_avg)\n            : \"white\"\n        }}\n      >\n        {vocabData.fields.Vocab.value}\n      </div>\n      {showDialog ? (\n        <Dialog hide={() => setShowDialog(false)}>\n          <h2 className=\"dialog-title\">{vocabData.fields.Vocab.value}</h2>\n          <DialogField item={vocabData} label=\"meaning\" fieldName=\"Meaning\" />\n          <DialogField\n            item={vocabData}\n            label=\"part of speech\"\n            fieldName=\"Speech-Type\"\n          />\n          <DialogField\n            item={vocabData}\n            label=\"reading\"\n            fieldName=\"Reading\"\n            html\n          />\n          <DialogField\n            item={vocabData}\n            label=\"発音\"\n            fieldName=\"Pronunciation\"\n            html\n          />\n          <DialogField\n            item={vocabData}\n            label=\"meaning mnemonic\"\n            fieldName=\"Meaning-Exp\"\n            html\n          />\n          <DialogField\n            item={vocabData}\n            label=\"reading mnemonic\"\n            fieldName=\"Reading-Exp\"\n            html\n          />\n          <DialogField\n            item={vocabData}\n            label=\"日本語\"\n            fieldName=\"Context1-jp\"\n            html\n          />\n          <DialogField\n            item={vocabData}\n            label=\"英語\"\n            fieldName=\"Context1-en\"\n            html\n          />\n          <DialogField\n            item={vocabData}\n            label=\"日本語\"\n            fieldName=\"Context2-jp\"\n            html\n          />\n          <DialogField\n            item={vocabData}\n            label=\"英語\"\n            fieldName=\"Context2-en\"\n            html\n          />\n          <DialogField\n            item={vocabData}\n            label=\"日本語\"\n            fieldName=\"Context3-jp\"\n            html\n          />\n          <DialogField\n            item={vocabData}\n            label=\"英語\"\n            fieldName=\"Context3-en\"\n            html\n          />\n        </Dialog>\n      ) : null}\n    </React.Fragment>\n  ) : null\n}\n","// query to fetch kanji\nimport { merge } from \"ramda\"\nimport { mean } from \"ramda\"\n\nconst ANKI_URL = \"http://127.0.0.1:8765\"\n\nconst ankiRequestBody = (action, params = {}) => ({\n  action,\n  params,\n  version: 6\n})\n\nconst VOCAB_DECK_NAME = \"日本語::kanji_vocab\"\nconst KANJI_DECK_NAME = \"日本語::kanji\"\n\nexport const notesInDeckRequestFactory = (deckName, key) => () => ({\n  url: ANKI_URL,\n  body: ankiRequestBody(\"findNotes\", {\n    query: `deck:${deckName}`\n  }),\n  transform: resp => {\n    return {\n      notesInDecks: {\n        [key]: resp\n      }\n    }\n  },\n  update: {\n    notesInDecks: merge\n  },\n  options: {\n    method: \"POST\"\n  }\n})\n\nexport const kanjiDeckInfoRequest = notesInDeckRequestFactory(\n  KANJI_DECK_NAME,\n  \"kanji\"\n)\n\nexport const vocabDeckInfoRequest = notesInDeckRequestFactory(\n  VOCAB_DECK_NAME,\n  \"vocab\"\n)\n\nconst noteInfoRequestFactory = (key, entryFieldName) => noteIds => ({\n  url: ANKI_URL,\n  body: ankiRequestBody(\"notesInfo\", {\n    notes: noteIds\n  }),\n  transform: resp => {\n    const map = {}\n    resp.forEach(entry => {\n      map[entry.fields[entryFieldName].value] = entry\n    })\n    return {\n      [key]: map\n    }\n  },\n  update: {\n    [key]: merge\n  },\n  options: {\n    method: \"POST\"\n  }\n})\n\nexport const kanjiInfoRequest = noteInfoRequestFactory(\"kanji\", \"Kanji\")\n\nexport const vocabInfoRequest = noteInfoRequestFactory(\"vocab\", \"Vocab\")\n\nexport const cardInfoRequest = cardIDs => ({\n  url: ANKI_URL,\n  body: ankiRequestBody(\"cardsInfo\", {\n    cards: cardIDs\n  }),\n  transform: cards => ({\n    kanji: cards.filter(card => card.deckName === KANJI_DECK_NAME),\n    vocab: cards.filter(card => card.deckName === VOCAB_DECK_NAME)\n  }),\n  update: {\n    kanji: (kanji, cards) => {\n      cards.forEach(card => {\n        const entry = kanji[card.fields.Kanji.value]\n\n        if (entry) {\n          if (entry.interval) {\n            entry.interval.push(card.interval)\n          } else {\n            entry.interval = [card.interval]\n          }\n          entry.interval_avg = mean(entry.interval)\n        } else {\n          console.log(card)\n          console.log(\"didnt find\")\n        }\n      })\n      return kanji\n    },\n    vocab: (vocab, cards) => {\n      cards.forEach(card => {\n        const entry = vocab[card.fields.Vocab.value]\n\n        if (entry) {\n          if (entry.interval) {\n            entry.interval.push(card.interval)\n          } else {\n            entry.interval = [card.interval]\n          }\n          entry.interval_avg = mean(entry.interval)\n        } else {\n          console.log(card)\n          console.log(\"didnt find\")\n        }\n      })\n      return vocab\n    }\n  },\n  options: {\n    method: \"POST\"\n  }\n})\n","import React, { useState } from \"react\"\nimport { useRequest } from \"redux-query-react\"\nimport { useSelector } from \"react-redux\"\n\nimport Kanji from \"./Kanji\"\nimport Vocab from \"./Vocab\"\n\nimport {\n  getKanjiByLevel,\n  getKanjiCardIDs,\n  getVocabByLevel,\n  getVocabCardIDs\n} from \"./selectors\"\nimport { cardInfoRequest } from \"./queries\"\n\nexport default function Level(props) {\n  const { level } = props\n\n  const [expanded, setExpanded] = useState(false)\n\n  return (\n    <div className=\"level\">\n      <h2 className=\"level-name\" onClick={() => setExpanded(!expanded)}>\n        {level}\n      </h2>\n      {expanded ? <LevelInfo level={level} /> : null}\n    </div>\n  )\n}\n\nfunction LevelInfo(props) {\n  const { level } = props\n\n  const [kanji] = useSelector(getKanjiByLevel)(level)\n  const [vocab] = useSelector(getVocabByLevel)(level)\n\n  const kanjiCards = useSelector(getKanjiCardIDs)(kanji)\n  const vocabCards = useSelector(getVocabCardIDs)(vocab)\n\n  const [{ isFinished: isFinishedKanji }] = useRequest(\n    kanjiCards ? cardInfoRequest(kanjiCards) : null\n  )\n  const [{ isFinished: isFinishedVocab }] = useRequest(\n    vocabCards ? cardInfoRequest(vocabCards) : null\n  )\n\n  return (\n    <div className=\"level\">\n      <h3>kanji</h3>\n      {isFinishedKanji ? (\n        <div className=\"kanjis\">\n          {kanji.map(kanji => (\n            <Kanji kanji={kanji} key={kanji} />\n          ))}\n        </div>\n      ) : null}\n      <h3>vocab</h3>\n      {isFinishedVocab ? (\n        <div className=\"vocabs\">\n          {vocab.map(vocab => (\n            <Vocab vocab={vocab} key={vocab} />\n          ))}\n        </div>\n      ) : null}\n    </div>\n  )\n}\n","import React from \"react\"\nimport { times } from \"ramda\"\nimport { useRequest } from \"redux-query-react\"\nimport { useSelector } from \"react-redux\"\n\nimport Level from \"./Level\"\n\nimport {\n  kanjiDeckInfoRequest,\n  vocabDeckInfoRequest,\n  kanjiInfoRequest,\n  vocabInfoRequest\n} from \"./queries\"\nimport { getNoteIds } from \"./selectors\"\n\nconst levels = times(n => `level${n + 1}`, 60)\n\nexport default function HomePage() {\n  useRequest(kanjiDeckInfoRequest())\n  useRequest(vocabDeckInfoRequest())\n\n  const { kanjiNotes, vocabNotes } = useSelector(getNoteIds)\n\n  useRequest(kanjiNotes ? kanjiInfoRequest(kanjiNotes) : null)\n  useRequest(vocabNotes ? vocabInfoRequest(vocabNotes) : null)\n\n  return (\n    <div className=\"App\">\n      <div className=\"item-list\">\n        {levels.map(level => (\n          <Level level={level} />\n        ))}\n      </div>\n    </div>\n  )\n}\n","import { compose, applyMiddleware, createStore, combineReducers } from \"redux\"\nimport { entitiesReducer, queriesReducer, queryMiddleware } from \"redux-query\"\n\nexport const getQueries = state => state.queries\nexport const getEntities = state => state.entities\n\nconst reducer = combineReducers({\n  entities: entitiesReducer,\n  queries: queriesReducer\n})\n\n// this is hacky and will only work when everything goes perfectly\n// but, you know, fuck it\nconst networkInterface = (url, method, networkOptions) => {\n  const { body } = networkOptions\n\n  return {\n    execute: async cb => {\n      const response = await fetch(url, {\n        method,\n        body: JSON.stringify(body)\n      })\n      const { result } = await response.json()\n      cb(undefined, response.status, result)\n    }\n  }\n}\n\nconst store = createStore(\n  reducer,\n  compose(\n    applyMiddleware(queryMiddleware(networkInterface, getQueries, getEntities)),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n)\n\nexport default store\n","import React from \"react\"\nimport \"./App.css\"\nimport { Provider } from \"react-redux\"\nimport { Provider as ReduxQueryProvider } from \"redux-query-react\"\n\nimport HomePage from \"./HomePage\"\n\nimport store from \"./store\"\n\nexport const getQueries = state => state.queries\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ReduxQueryProvider queriesSelector={getQueries}>\n        <HomePage />\n      </ReduxQueryProvider>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}